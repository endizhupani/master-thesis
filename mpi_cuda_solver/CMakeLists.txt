cmake_minimum_required(VERSION 3.18)
set(CMAKE_VERBOSE_MAKEFILE ON)
set(project_name mpi_cuda_solver)
project(${project_name})
enable_language(CUDA CXX)
set(CMAKE_CUDA_HOST_FLAGS " -Xcompiler ")
set(CMAKE_CUDA_HOST_LINKER_FLAGS " -Xlinker ")
set(executable ${PROJECT_SOURCE_DIR}/app/main.cu)
set(executable_name ${project_name}.exe)

file(GLOB_RECURSE SOURCES "src/*.cpp")
add_executable(${executable_name} ${executable} ${SOURCES})
target_include_directories(${executable_name} PUBLIC "${PROJECT_SOURCE_DIR}/include" "${PROJECT_SOURCE_DIR}/src" "${PROJECT_SOURCE_DIR}/lib/hemi" "${PROJECT_SOURCE_DIR}/lib/hemi/range")

include(CheckLanguage)
check_language(CUDA)
if (CMAKE_CUDA_COMPILER_ID)
message(STATUS "Found CUDA compiler: ${CMAKE_CUDA_COMPILER_ID}")
    enable_language(CUDA CXX)
    set( CMAKE_CUDA_FLAGS_INCLUDE --pre-include=hemi.h -use_fast_math)
    if(NOT DEFINED CMAKE_CUDA_STANDARD)
        set(CMAKE_CUDA_STANDARD 11)
        set(CMAKE_CUDA_STANDARD_REQUIRED ON)
    endif()
    set(CMAKE_CUDA_HOST_COMPILER ${CMAKE_CXX_COMPILER})
    set_property(TARGET ${executable_name} PROPERTY CUDA_ARCHITECTURES 61 75 80)
    target_include_directories(${executable_name} PUBLIC "${CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES}")
    target_compile_options(${executable_name} PRIVATE ${CMAKE_CUDA_FLAGS_INCLUDE} )
endif()

find_package(MPI REQUIRED)
message(STATUS "Run: ${MPIEXEC} ${MPIEXEC_NUMPROC_FLAG} ${MPIEXEC_MAX_NUMPROCS} ${MPIEXEC_PREFLAGS} EXECUTABLE ${MPIEXEC_POSTFLAGS} ARGS")
target_link_libraries(${executable_name} PUBLIC MPI::MPI_CXX)

find_package(OpenMP)
if(OpenMP_CXX_FOUND)
    target_link_libraries(${executable_name} PUBLIC OpenMP::OpenMP_CXX)
endif()

